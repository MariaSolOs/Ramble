#!/usr/bin/env node

require('dotenv').config({ path: '../.env' });
require('../config/mongoose');
const logger = require('heroku-logger');

const Experience = require('../models/experience'),
      Occurrence = require('../models/occurrence'),
      Booking = require('../models/booking'),
      User = require('../models/user');

const occCleanUp = async () => {
    logger.info('JOB START', {job: 'CLEAN OCCURRENCES'});
    try {
        let bookCount = 0;
        const yesterday = new Date();
        yesterdays.setDate(new Date().getDate() - 1);
        const occs = await Occurrence.find({date: {$lte: yesterday}}).populate([
                        { path: 'experience' },
                        { path: 'bookings', select: 'client' }
                    ]);
        for(const occ of occs) {
            for(const booking of occ.bookings) {
                //Update users' past experiences
                await User.findByIdAndUpdate(booking.client, 
                {$addToSet: {pastExperiences: occ.experience._id}});
            }
            //Delete bookings
            const delBookings = occ.bookings.map(booking => booking._id);
            const delCount = await Booking.deleteMany({_id: {$in: delBookings}});
            bookCount += delCount.deletedCount;
        }
        const occCount = await Occurrence.deleteMany({date: {$lte: yesterday}});
        logger.info('JOB SUCCESS', {
            job: 'CLEAN OCCURRENCES', 
            delOccurrences: occCount.deletedCount,
            delBookings: bookCount
        });
    } catch(err) {
        logger.error(err, {job: 'CLEAN OCCURRENCES'});
    }
    process.exit();
}
occCleanUp();

