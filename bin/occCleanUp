#!/usr/bin/env node

require('dotenv').config({ path: '../.env' });
require('../config/mongoose');

const Experience = require('../models/experience'),
      Occurrence = require('../models/occurrence'),
      Booking = require('../models/booking'),
      User = require('../models/user'),
      Creator = require('../models/creator'),
      endOfYesterday = require('date-fns/endOfYesterday');

const occCleanUp = async () => {
    console.log('JOB STARTS: CLEAN OCCURRENCES');
    try {
        //Find all old occurrences
        const occs = await Occurrence.find({date: {$lt: endOfYesterday()}})
                    .populate([{ path: 'experience', select: '_id' },
                               { path: 'bookings', select: 'client' }
                    ]);

        const bookingsToDel = [];
        for(const occ of occs) {
            for(const booking of occ.bookings) {
                //Update users' past experiences
                await User.findByIdAndUpdate(booking.client, 
                {$addToSet: {pastExperiences: occ.experience._id}});
                //Just to be sure, delete booking from creator's requests
                await Creator.findOneAndUpdate({bookingRequests: booking._id}, 
                {$pull: {bookingRequests: booking._id}});
                bookingsToDel.push(booking._id)
            }
        }
        const bookCount = await Booking.deleteMany({_id: {$in: bookingsToDel}});
        const occCount = await Occurrence.deleteMany({date: {$lt: endOfYesterday()}});
        console.log(`JOB SUCCESS: CLEAN OCCURRENCES. DELETED OCC: ${
        occCount.deletedCount}, DELETED BOOKINGS: ${bookCount.deletedCount}`);
    } catch(err) {
        console.log(`JOB FAILED: CLEAN OCCURRENCES - ${err}`);
    }
    process.exit();
}
occCleanUp();

