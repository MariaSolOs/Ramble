#!/usr/bin/env node

require('dotenv').config({ path: '../.env' });
require('../config/mongoose');

const Experience = require('../models/experience'),
      Occurrence = require('../models/occurrence'),
      Booking = require('../models/booking'),
      User = require('../models/user'),
      Creator = require('../models/creator'),
      Notification = require('../models/notification'),
      CompanyReceipt = require('../models/companyReceipt');

const occUpdates = async () => {
    console.log('JOB STARTS: UPDATE OCCURRENCES');
    try {
        let yesterday = new Date();
        yesterday.setDate(new Date().getDate() - 1);
        yesterday.setUTCHours(23, 59, 59);

        //Find all old occurrences
        const occs = await Occurrence.find({dateEnd: {$lt: yesterday}}, 
                     'experience bookings dateStart timeslot')
                     .populate([{ path: 'experience', select: '_id title' },
                                { path: 'bookings', select: 'client stripe' }
                    ]);

        const bookingsToDel = [];
        for(const occ of occs) {
            for(const booking of occ.bookings) {
                //Send review notif to client
                await Notification.create({
                    user: booking.client,
                    message: `How was your experience "${
                    occ.experience.title}"? Feel free to rate and review`, 
                    category: 'User-ExperienceReview',
                    expToReview: occ.experience._id
                });

                //Just to be sure, delete booking from creator's requests
                await Creator.findOneAndUpdate({bookingRequests: booking._id}, 
                {$pull: {bookingRequests: booking._id}});
                bookingsToDel.push(booking._id);

                //Create company receipt
                await CompanyReceipt.create({
                    experience: occ.experience._id,
                    client: booking.client,
                    creatorProfit: booking.stripe.creatorProfit,
                    promoCode: booking.stripe.promoCode,
                    rambleGain: booking.stripe.rambleGain,
                    taxGST: booking.stripe.taxGST,
                    taxQST: booking.stripe.taxQST,
                    date: occ.dateStart,
                    timeslot: occ.timeslot
                });
            }
        }

        const bookCount = await Booking.deleteMany({_id: {$in: bookingsToDel}});
        const occCount = await Occurrence.deleteMany({dateEnd: {$lt: yesterday}});
        console.log(`JOB SUCCESS: CLEAN OCCURRENCES. DELETED OCC: ${
        occCount.deletedCount}, DELETED BOOKINGS: ${bookCount.deletedCount}`);
        
    } catch(err) {
        console.log(`JOB FAILED: UPDATE OCCURRENCES - ${err}`);
    }
    process.exit();
}
occUpdates();

