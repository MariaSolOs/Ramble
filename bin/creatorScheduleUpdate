#!/usr/bin/env node

require('dotenv').config({ path: '../.env' });
require('../config/mongoose');

const fs = require('fs'),
      path = require('path'),
      { compile } = require('handlebars'),
      mjml2html = require('mjml'),
      sgMail = require('../config/sendgrid');

const Experience = require('../models/experience'),
      Creator = require('../models/creator'),
      User = require('../models/user');

const creatorScheduleUpdate = async () => {
    console.log('JOB STARTS: CALENDAR UPDATE REMINDERS');
    try {
        //Find all experiences where the availability is about to expire
        const in3Days = new Date();
        in3Days.setDate(new Date().getDate() + 3);
        const exps = await Experience.find({
                           'avail.to': {$lte: in3Days},
                           status: 'approved'
                    }, 'title creator avail images location')
                    .populate({
                        path: 'creator', 
                        select: 'user',
                        populate: {
                            path: 'user',
                            select: 'email'
                        }}
                    );

        //Create mjml
        const source = fs.readFileSync(path.resolve(__dirname, 
                       '../emailTemplates/creatorScheduleUpdate.mjml'), 'utf-8');              
        const template = compile(source);   

        //Send emails
        for(const exp of exps) {
            try {
                const mjml = template({
                    expTitle: exp.title,
                    expImage: exp.images[0],
                    expLocation: exp.location.displayLocation,
                    calendarUrl: `${process.env.CLIENT_URL}/api/email/${
                    exp.creator.user._id}/cal-update?exp=${exp._id}`
                });
                await sgMail.send({
                    to: exp.creator.user.email.address,
                    from: {
                        name: 'ramble',
                        email: process.env.ZOHO_EMAIL,
                    },
                    subject: 'Time to update your availabilities', 
                    text: `Your availabilities for "${exp.title}" need to be updated. ` + 
                          'Go to your Creator dashboard and list your schedule' + 
                          ' for the next period.', 
                    html: mjml2html(mjml).html
                });
            } catch(err) { 
                console.error(`ERROR SENDING EMAIL: ${err}`);
                continue; 
            }
        }

        console.log(`JOB SUCCESS: CALENDAR UPDATE REMINDERS (${exps.length} EMAILS)`);
    } catch(err) {
        console.error(`JOB FAILED: CALENDAR UPDATE REMINDERS - ${err}`);
    }
    process.exit();
}

creatorScheduleUpdate();